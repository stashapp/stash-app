"""The query root for this schema"""
type Query {
  #### Performers ####

  # performer names may not be unique
  """Find a performer by ID"""
  findPerformer(id: ID!): Performer @isRead
  queryPerformers(performer_filter: PerformerFilterType, filter: QuerySpec): QueryPerformersResultType! @isRead

  #### Studios ####

  # studio names should be unique
  """Find a studio by ID or name"""
  findStudio(id: ID, name: String): Studio @isRead
  queryStudios(studio_filter: StudioFilterType, filter: QuerySpec): QueryStudiosResultType! @isRead

  #### Tags ####

  # tag names will be unique
  """Find a tag by ID or name, or aliases"""
  findTag(id: ID, name: String): Tag @isRead
  queryTags(tag_filter: TagFilterType, filter: QuerySpec): QueryTagsResultType! @isRead

  """Find a tag cateogry by ID"""
  findTagCategory(id: ID!): TagCategory @isRead
  queryTagCategories(filter: QuerySpec): QueryTagCategoriesResultType! @isRead

  #### Scenes ####

  # ids should be unique
  """Find a scene by ID"""
  findScene(id: ID!): Scene @isRead

  """Finds a scene by an algorithm-specific checksum"""
  findSceneByFingerprint(fingerprint: FingerprintQueryInput!): [Scene!]! @isRead
  """Finds scenes that match a list of hashes"""
  findScenesByFingerprints(fingerprints: [String!]!): [Scene!]! @isRead
  findScenesByFullFingerprints(fingerprints: [FingerprintQueryInput!]!): [Scene!]! @isRead

  queryScenes(scene_filter: SceneFilterType, filter: QuerySpec): QueryScenesResultType! @isRead

  #### Edits ####

  findEdit(id: ID): Edit @isRead
  queryEdits(edit_filter: EditFilterType, filter: QuerySpec): QueryEditsResultType! @isRead

  #### Users ####

  """Find user by ID or username"""
  findUser(id: ID, username: String): User @isRead
  queryUsers(user_filter: UserFilterType, filter: QuerySpec): QueryUsersResultType! @isAdmin

  """Returns currently authenticated user"""
  me: User

  ### Full text search ###
  searchPerformer(term: String!, limit: Int): [Performer!]! @isRead
  searchScene(term: String!, limit: Int): [Scene!]! @isRead

  #### Version ####
  version: Version! @isRead

  ### Instance Config ###
  getConfig: StashBoxConfig! @isRead
}

type Mutation {
  # Admin-only interface
  sceneCreate(input: SceneCreateInput!): Scene @isModify
  sceneUpdate(input: SceneUpdateInput!): Scene @isModify
  sceneDestroy(input: SceneDestroyInput!): Boolean! @isModify

  performerCreate(input: PerformerCreateInput!): Performer @isModify
  performerUpdate(input: PerformerUpdateInput!): Performer @isModify
  performerDestroy(input: PerformerDestroyInput!): Boolean! @isModify

  studioCreate(input: StudioCreateInput!): Studio @isModify
  studioUpdate(input: StudioUpdateInput!): Studio @isModify
  studioDestroy(input: StudioDestroyInput!): Boolean! @isModify

  tagCreate(input: TagCreateInput!): Tag @isModify
  tagUpdate(input: TagUpdateInput!): Tag @isModify
  tagDestroy(input: TagDestroyInput!): Boolean! @isModify

  userCreate(input: UserCreateInput!): User @isAdmin
  userUpdate(input: UserUpdateInput!): User @isAdmin
  userDestroy(input: UserDestroyInput!): Boolean! @isAdmin

  imageCreate(input: ImageCreateInput!): Image @isEdit
  imageDestroy(input: ImageDestroyInput!): Boolean! @isModify

  """User interface for registering"""
  newUser(input: NewUserInput!): String
  activateNewUser(input: ActivateNewUserInput!): User

  """Generates an invite code using an invite token"""
  generateInviteCode: String!
  """Removes a pending invite code - refunding the token"""
  rescindInviteCode(code: String!): Boolean!
  """Adds invite tokens for a user"""
  grantInvite(input: GrantInviteInput!): Int!
  """Removes invite tokens from a user"""
  revokeInvite(input: RevokeInviteInput!): Int!

  tagCategoryCreate(input: TagCategoryCreateInput!): TagCategory @isAdmin
  tagCategoryUpdate(input: TagCategoryUpdateInput!): TagCategory @isAdmin
  tagCategoryDestroy(input: TagCategoryDestroyInput!): Boolean! @isAdmin

  """Regenerates the api key for the given user, or the current user if id not provided"""
  regenerateAPIKey(userID: ID): String!

  """Generates an email to reset a user password"""
  resetPassword(input: ResetPasswordInput!): Boolean!

  """Changes the password for the current user"""
  changePassword(input: UserChangePasswordInput!): Boolean!

  # Edit interfaces
  """Propose a new scene or modification to a scene"""
  sceneEdit(input: SceneEditInput!): Edit! @isEdit
  """Propose a new performer or modification to a performer"""
  performerEdit(input: PerformerEditInput!): Edit! @isEdit
  """Propose a new studio or modification to a studio"""
  studioEdit(input: StudioEditInput!): Edit! @isEdit
  """Propose a new tag or modification to a tag"""
  tagEdit(input: TagEditInput!): Edit! @isEdit

  """Vote to accept/reject an edit"""
  editVote(input: EditVoteInput!): Edit! @isVote
  """Comment on an edit"""
  editComment(input: EditCommentInput!): Edit! @isEdit
  """Apply edit without voting"""
  applyEdit(input: ApplyEditInput!): Edit! @isAdmin
  """Cancel edit without voting"""
  cancelEdit(input: CancelEditInput!): Edit! @isEdit

  """Matches/unmatches a scene to fingerprint"""
  submitFingerprint(input: FingerprintSubmission!): Boolean! @isRead
}

schema {
  query: Query
  mutation: Mutation
}
